Consignas:


1) consigna ejercicio integrador"Ejercicio Integrador: Clases Abstractas e InterfacesUn fanático dePókemon desea implementar para el modelado de un videojuego los diferentes ataques  de  cada  una  de  estas  criaturas.  Para  ello,  cuenta  con  una  clase  abstracta  llamada Pokemon, la cual posee los atributos: num_pokedex, nombrePokemon, pesoPokemon, sexo,temporadaQueAparece  y  tipo,  e  implementa  métodos  para  los  ataques  comunes  que  suele tener    la    mayoría,    entre    ellos    se    encuentran:    atacarPlacaje(),    atacarArañazo()    y atacarMordisco(). Sin embargo, este fanático también desarrolló una serie de interfaces para contemplar los ataques de Pókemons de cierto tipo:•IElectrico: con  los  métodos  atacarImpactrueno(),  atacarPunioTrueno(),  atacarRayo(), atacarRayoCarga().•IPlanta:con   los   métodos   atacarParalizar(),   atacarDrenaje(),   atacarHojaAfilada(), atacarLatigoCepa().•IFuego: con los métodos atacarPunioFuego(), atacarAscuas(), atacarLanzallamas().•IAgua:con  los  métodos  atacarHidrobomba(),  atacarPistolaAgua(),  atacarBurbuja(), atacarHidropulso().A  partir  de  estas  interfaces,  el  Pokefanático  desea  crear  las  clasesque  manejen  a  los personajes  principales  del  videojuego,  los  cuales  son  los  pokemons  starters  de  la  primera temporada  (Charmander,  Bulbasaur  y  Squirtle)  y  Pikachu;  para  ello  tener  en  cuenta  que: Charmander es de tipo fuego, Bulbasaur es de tipo planta, Squirtle es de tipo agua y Pikachu de tipo eléctrico.Una   vez    implementadas   la   clase    abstracta   e   interfaces,   sobrescribir    los   métodos correspondientes  para  adaptarlos  a  cada  Pókemon  mostrando  un  mensaje  en  pantalla  que indique qué pókemon es y qué ataque está realizando, por ejemplo: “Soy Charmander y estoy atacando  con  Ascuas”  o  “Soy  Pikachu  y  estoy  atacando  con  placaje”.  Luego  de  realizar  lo mencionado,  crear  las  instancias  necesarias  y  llamar  a  cada  uno  de  los  métodos  de  cada Pokemon."


2) 2  Crea una clase llamada Forma:
• Con los siguientes atributos y métodos:
◦ String nombre
◦ double posicionX, double posicionY
◦ String color
◦ constructor propio con todos sus atributos
◦ método: double calcularArea( ), y getters y setters de los atributos.
• Crea una clase llamada Triangulo que herede de la clase Forma, y con los atributos base y altura.
Define en ella el método calcularArea().
• Crea una clase llamada Cuadrado que herede de la clase Forma, y con el atributo lado. Define en
ella el método calcularArea() y calcularPerimetro().
• Crea una clase aparte con el método main para probar los métodos de las subclases Triangulo y
Cuadrado.


3)  
   3   Clase Programador . Clase que hereda de Empleado y además tiene:
Atributos:
- lineasDeCodigoPorHora : tipo entero
- lenguajeDominante: tipo cadena
Metodos:
- Constructor con y sin parámetros de entrada.
- Método double calculaSalario(), que calcula y devuelve el salario del programador,
calculado con la operación 10* lineasDeCodigoPorHora.
    

4)  Define una clase Persona con los siguientes datos
• Atributos privados :
- Nombre : String
- NIF : String
• Y los siguientes métodos:
- Constructor parametrizado
- Métodos de acceso para los atributos
Define una clase Cuenta con los siguientes datos
• Atributos privados:
- numerocuenta : entero largo
- saldo : double
- cliente : atributo de la clase Persona.
• Y los siguientes métodos:
- Constructor que recibe un cliente y un número de cuenta
- Métodos de acceso para los tres atributos
- ingresar(double x): permitirá ingresar una cantidad en la cuenta.
- retirar(double x): permitirá sacar una cantidad de la cuenta.
Define una clase CuentaCor


5) Crear una clase llamada Empleado
• atributos privados nombre, y teléfono, ambos de tipo String.
• El constructor necesitará el nombre y el teléfono.
• Implementar los métodos necesarios para acceder a los atributos (getters y setters).
• Añadir el atributo estático y privado numeroEmpleados. Este atributo almacenará el número de
instancias que se han creado de la clase Empleado.
• Implementar un método público para conocer el valor de numeroEmpleados. Llamarlo
getNumeroEmpleados().
Crear una clase aparte con el método main:
JYOC - JAVA - EJERCICIOS 66

• Crear un array de 4 empleados. Los datos de cada empleado será leidos por consola.
• Mostrar los datos de cada empleado del array
• Llamar al método getNumeroEmpleados para mostrar el número de empleados instanciados.


6) 6 8.a.10.Ejercicio Alfombras
• Crear una clase Alfombra, con atributos privados String color, int precioMetro.
• Crear clase AlfombraRedonda (hereda de Alfombra) con atributo int radio
• Crear clase AlfombraCuadrada (hereda de Alfombra) con atributo int lado
JYOC - JAVA - EJERCICIOS 67

• Hace Constructores, getters y setters para todas las clases
• Hacer una interfaz IAlfombras con los métodos
- double calcularSuperficie() calcula la superficie de la alfombra
- double calcularPrecio() que calcula el precio de la alfombra (que será la
superficie*precioMetro)
• Aplica la interfaz a la clase Alfombra, y estos métodos en la clase Alfombra serán también
abstractos. Escribir el contenido real de los métodos en donde corresponda.
Hacer un programa Main que cree objetos 


7) 7  Un fanático de Dragon Ball desea implementar para el modelado de un videojuego los diferentes ataques de los guerreros Z. Para ello, cuenta con una clase abstracta llamada GuerreroZ, la cual posee los atributos: nombreGuerrero, nivelPoder, raza, universo y equipo, e implementa métodos para los ataques comunes que suelen tener la mayoría de los personajes, entre ellos se encuentran: atacarGolpe(), atacarPatada() y atacarCabezazo().

Sin embargo, este fanático también desarrolló una serie de interfaces para contemplar los ataques especiales de los guerreros según su tipo de poder:

ISaiyajin: Con los métodos atacarKamehameha(), atacarFinalFlash(), atacarBigBang() y atacarOndaVital().
IAndroide: Con los métodos atacarRayoMortal(), atacarExplosiónEnergetica(), atacarGolpeDestructor(), atacarAbsorberEnergia().
INamekiano: Con los métodos atacarCañonEspecial(), atacarOndaMística(), atacarGranadaInfernal().
IDios: Con los métodos atacarExplosiónDivina(), atacarDestrucciónTotal(), atacarJusticiaDivina(), atacarRayoDivino().
A partir de estas interfaces, el fanático de Dragon Ball desea crear las clases que manejen a los personajes principales del videojuego, los cuales son algunos de los guerreros Z más conocidos: Goku, Vegeta, Piccolo y Androide 17. Para ello, ten en cuenta que:

Goku y Vegeta son Saiyajin.
Piccolo es Namekiano.
Androide 17 es un androide.
Una vez implementadas la clase abstracta e interfaces, sobrescribir los métodos correspondientes para adaptarlos a cada guerrero, mostrando un mensaje en pantalla que indique qué guerrero es y qué ataque está realizando, por ejemplo: “Soy Goku y estoy atacando con Kamehameha” o “Soy Androide 17 y estoy atacando con rayo mortal”.

Luego de realizar lo mencionado, crea las instancias necesarias y llama a cada uno de los métodos de cada guerrero.
 


8) 9 Un fanático de Naruto quiere modelar un sistema de personajes para un videojuego basado en la serie. Para ello, se creará una estructura de clases en la cual se representarán las habilidades y técnicas de varios ninjas, cada uno especializado en su propio tipo de combate.

Cada ninja pertenece a una aldea y tiene un tipo de especialidad que determina el tipo de técnicas que puede realizar. Además, cada ninja tiene ciertos atributos comunes y habilidades básicas.

Requerimientos
Crear una clase abstracta llamada Ninja, que contenga los siguientes atributos comunes:

nombre: nombre del ninja.
edad: edad del ninja.
aldea: la aldea a la que pertenece (por ejemplo, "Konoha", "Suna", etc.).
nivelChakra: nivel de chakra del ninja, un valor que representa su energía.
Además, esta clase debe contener los siguientes métodos comunes para todas las técnicas:

concentrarChakra(): muestra un mensaje indicando que el ninja está concentrando chakra.
realizarAtaqueBasico(): muestra un mensaje indicando que el ninja está realizando un ataque básico (puede ser "Shuriken" o "Kunai").
Crear interfaces para técnicas específicas de cada tipo de especialidad:

ITaijutsu: para técnicas de combate cuerpo a cuerpo. Debe tener los métodos atacarPuñoDinamico() y atacarLotoPrimario().
INinjutsu: para técnicas que utilizan chakra en una forma avanzada. Debe incluir los métodos atacarBolaFuego() y invocarKuchiyose().
IGenjutsu: para técnicas de ilusionismo. Debe incluir los métodos atacarIlusionOscura() y atacarParalisisMental().
Crear clases específicas de ninjas basadas en los personajes de la serie, implementando las interfaces correspondientes y sobrescribiendo los métodos:

Naruto Uzumaki: Especialista en Ninjutsu.
Rock Lee: Especialista en Taijutsu.
Kakashi Hatake: Especialista en Ninjutsu y Genjutsu.
Sakura Haruno: Especialista en Genjutsu.
Implementar un sistema de combate simple donde cada ninja pueda realizar varias técnicas en secuencia. Al usar una técnica, el nivelChakra del ninja debe reducirse en una cantidad específica (por ejemplo, 10 puntos por técnica). Si el nivelChakra es insuficiente, debe mostrarse un mensaje que indique que el ninja está agotado y no puede usar la técnica.

En el método main, crea las instancias necesarias y llama a los métodos de ataque de cada ninja para demostrar sus habilidades. Asegúrate de mostrar mensajes que indiquen qué personaje está realizando cada técnica y de reducir el nivel de chakra al realizar cada ataque.

Ejemplo de mensajes esperados
Para cada ataque, mostrar algo como:

“Soy Naruto Uzumaki y estoy usando Bola de Fuego.”
“Soy Rock Lee y estoy atacando con Puño Dinámico.”
Si el chakra es insuficiente: “Soy Sakura Haruno y estoy agotada; no puedo realizar Paralisis Mental.”




9) Un fanático de Naruto quiere modelar un sistema de personajes para un videojuego basado en la serie. Para ello, se creará una estructura de clases en la cual se representarán las habilidades y técnicas de varios ninjas, cada uno especializado en su propio tipo de combate.

Cada ninja pertenece a una aldea y tiene un tipo de especialidad que determina el tipo de técnicas que puede realizar. Además, cada ninja tiene ciertos atributos comunes y habilidades básicas.

Requerimientos
Crear una clase abstracta llamada Ninja, que contenga los siguientes atributos comunes:

nombre: nombre del ninja.
edad: edad del ninja.
aldea: la aldea a la que pertenece (por ejemplo, "Konoha", "Suna", etc.).
nivelChakra: nivel de chakra del ninja, un valor que representa su energía.
Además, esta clase debe contener los siguientes métodos comunes para todas las técnicas:

concentrarChakra(): muestra un mensaje indicando que el ninja está concentrando chakra.
realizarAtaqueBasico(): muestra un mensaje indicando que el ninja está realizando un ataque básico (puede ser "Shuriken" o "Kunai").
Crear interfaces para técnicas específicas de cada tipo de especialidad:

ITaijutsu: para técnicas de combate cuerpo a cuerpo. Debe tener los métodos atacarPuñoDinamico() y atacarLotoPrimario().
INinjutsu: para técnicas que utilizan chakra en una forma avanzada. Debe incluir los métodos atacarBolaFuego() y invocarKuchiyose().
IGenjutsu: para técnicas de ilusionismo. Debe incluir los métodos atacarIlusionOscura() y atacarParalisisMental().
Crear clases específicas de ninjas basadas en los personajes de la serie, implementando las interfaces correspondientes y sobrescribiendo los métodos:

Naruto Uzumaki: Especialista en Ninjutsu.
Rock Lee: Especialista en Taijutsu.
Kakashi Hatake: Especialista en Ninjutsu y Genjutsu.
Sakura Haruno: Especialista en Genjutsu.
Implementar un sistema de combate simple donde cada ninja pueda realizar varias técnicas en secuencia. Al usar una técnica, el nivelChakra del ninja debe reducirse en una cantidad específica (por ejemplo, 10 puntos por técnica). Si el nivelChakra es insuficiente, debe mostrarse un mensaje que indique que el ninja está agotado y no puede usar la técnica.

En el método main, crea las instancias necesarias y llama a los métodos de ataque de cada ninja para demostrar sus habilidades. Asegúrate de mostrar mensajes que indiquen qué personaje está realizando cada técnica y de reducir el nivel de chakra al realizar cada ataque.

Ejemplo de mensajes esperados
Para cada ataque, mostrar algo como:

“Soy Naruto Uzumaki y estoy usando Bola de Fuego.”
“Soy Rock Lee y estoy atacando con Puño Dinámico.”
Si el chakra es insuficiente: “Soy Sakura Haruno y estoy agotada; no puedo realizar Paralisis Mental.”




10) Ejercicio multiviviendas
Crear las siguientes clases y métodos, y una clase Principal que vaya probando la creación de las clases
y los métodos:
• Crear clase Vivienda con atributos String calle, double precio, int superficieEnMetros
• Crear clase Piso (que hereda de Vivienda) con atributos int planta, int puerta
• Crear clase Adosado (que hereda de Vivienda) con atributos int numPlantas
• Crear clase Chalet (que hereda de Vivienda) con atributos int numParcela, boolean conPiscina.
• Poner public, private o protected a los atributos segun corresponda
• Crear constructores para cada clase, que no incluyen el precio, pues el precio se calcula solo con
métodos que vienen explicados después.
• Crear en Vivienda el método calcularPrecio(), que es el valor de superficieEnMetros*1000,
válido para todos los hijos menos para el Chalet, que es superficieEnMetros*1300
• Crear la una clase principal donde crear objetos de las clases previamente indicadas.
MEJORA 1:
• Crear en Vivienda un método abstracto double impuestoMunicipal(), que para las clases
heredadas devolverá el importe del impuesto, que será el 5% del precio la vivienda, menos en el
caso de los chalets, que ademas de ese 5%, sera de 200 euros mas si el chalet tiene piscina
• Crear la interfaz IViviendas, con el método abstracto void aumentarPrecio(int aumento) y
hacer que todos los hijos de Vivienda implementen dicha interfaz.
MEJORA 2:
• Crear la clase Urbanizacion, que contiene una colección (a elegir por el alumno, un array o lo
que se quiera) de Viviendas.
• Meter en la colección objetos de piso, chalet y adosado,
• Posteriormente, crear en la clase Urbanizacion un método que calcule el precio de todas las
viviendas que existan en la urbanizacion
• Posteriormente, crear en la clase Urbanizacion un método que calcule el precio de todos los
chalets que existan en la urbanizacion
MEJORA 3:
• Guardar la colección de viviendas en un fichero binario, y posteriormente, leer el fichero y
mostrar su contenido




 11) Clases y Jerarquía: Crea una jerarquía de clases donde la clase abstracta Vehiculo tenga métodos como acelerar(), frenar(), y mostrarTipo().
Subclases: Crea subclases como Coche, Motocicleta, y Bicicleta, cada una con una implementación distinta de los métodos.
Interfaces: Define una interfaz Electrico que tenga un método cargarBateria(). Implementa esta interfaz en una subclase CocheElectrico.
Polimorfismo: Crea una lista de vehículos y utiliza un bucle para recorrer y ejecutar métodos polimórficos de cada vehículo.




12) Clases y Jerarquía: Define una clase abstracta Animal con un método abstracto hacerSonido().
Subclases: Crea clases Perro, Gato, y Pajaro que extiendan Animal y que implementen el método hacerSonido().
Interfaz: Define una interfaz Domesticable con métodos jugar() e implementa esta interfaz en Perro y Gato.
Polimorfismo: Crea una lista de Animal y usa polimorfismo para ejecutar hacerSonido() y jugar() si el animal es domesticable. 



13) Clases y Jerarquía: Crea una clase abstracta Juego con atributos titulo, plataforma, y métodos como mostrarDetalles().
Subclases: Implementa subclases JuegoDeAccion y JuegoDeEstrategia, donde JuegoDeAccion tenga un atributo nivelDificultad y JuegoDeEstrategia tenga numeroDeJugadores.
Interfaz: Define una interfaz Multijugador con métodos unirPartida() y salirPartida(), e implementa esta interfaz en JuegoDeEstrategia.
Polimorfismo: Crea una lista de juegos, muestra detalles de cada uno y permite que los juegos de estrategia gestionen sesiones multijugador.



14) Clases y Jerarquía: Crea una clase abstracta Evento con atributos como nombre, fecha, y métodos como mostrarDetalles().
Subclases: Implementa subclases Concierto y Conferencia, donde Concierto tenga atributos como artista y Conferencia tenga tema.
Interfaz: Define una interfaz Reservable con métodos reservarAsiento() y cancelarReserva(), e implementa esta interfaz en ambas subclases.
Polimorfismo: Crea una lista de eventos y permite reservar asientos y mostrar detalles de cada evento.



15   Clases y Jerarquía: Crea una clase abstracta Publicacion que contenga atributos como titulo, autor, y métodos como mostrarDetalles().
Subclases: Implementa subclases Libro y Revista, donde Libro tenga atributos como numeroDePaginas y Revista tenga frecuenciaPublicacion.
Interfaz: Define una interfaz Prestable con métodos prestar() y devolver(), y permite que ambas subclases implementen esta interfaz.
Polimorfismo: Crea una lista de publicaciones y muestra los detalles y el estado de préstamo de cada publicación.



16)  Clase abstracta Personaje:
Define una clase abstracta llamada Personaje que representará a los personajes que usan Nen. Esta clase debe tener atributos encapsulados (privados) como nombre, edad, energiaNen, y métodos abstractos como usarHabilidad() que cada tipo de habilidad de Nen implementará de manera distinta.

Interface HabilidadNen:
Crea una interfaz HabilidadNen que contenga métodos como:

activarHabilidad(): para activar una habilidad específica.
detenerHabilidad(): para detener la habilidad cuando se desactiva.
Clases específicas para tipos de Nen:
Luego, define varias subclases de Personaje según el tipo de Nen, como Emisor, Manipulador, Transformador, etc. Cada una de estas subclases debe implementar el método usarHabilidad() de una forma única (usando polimorfismo).

Implementación de habilidades de Nen:
Cada subclase debe implementar la interfaz HabilidadNen y definir métodos específicos que simulen sus habilidades. Por ejemplo:

En Emisor: activarHabilidad() podría mostrar un mensaje simulando la emisión de energía a distancia.
En Transformador: activarHabilidad() podría mostrar un cambio en la forma de la energía.
Clase Pelea:
Define una clase Pelea que simule una pelea entre dos personajes de diferentes tipos de Nen. Esta clase debería tener un método que permita a los personajes usar sus habilidades y reducir su energiaNen.



17) Clase abstracta Instrumento:
Define una clase abstracta llamada Instrumento que representa un instrumento musical. Esta clase tiene atributos como nombre, tipo y volumen (para simular el volumen al que toca el instrumento). También debe tener un método abstracto tocar() que se implementará de forma diferente según el tipo de instrumento.

Interface Afinable:
Crea una interfaz Afinable con los métodos afinar() y desafinar(). Esto permite que ciertos instrumentos puedan afinarse para modificar su sonido antes de tocar.

Clases específicas de instrumentos:
Define varias subclases de Instrumento para representar diferentes tipos de instrumentos musicales, como Guitarra, Piano y Trompeta. Cada una de estas clases debe implementar el método tocar() de manera única (usando polimorfismo). Además, algunos instrumentos implementarán la interfaz Afinable, mientras que otros no.

Clase Concierto:
Crea una clase Concierto que organiza un concierto donde se tocan diferentes instrumentos. Esta clase debe permitir a cada instrumento tocar una melodía y mostrar el volumen y tipo de cada instrumento.


